3.2.0.alpha.237 (Bleeding Edge)
1faeeb68ccdcb0b2c4cbe63133e1285a536c5067
o:Sass::Tree::RootNode
:@template"öH@import "shared";

// @doc off
// Note ----------------------------------------------------------------------
// Safari is the only browser that currently supports 3D transforms.
// Because of that it can be important to control whether a given 2D transform
// uses the full range of experimental browser prefixes, or only the 3D list.
// To make that easy, all 2D transforms include an browser-targeting toggle ($only3d)
// to switch between the two support lists. The toggle defaults to 'false' (2D),
// and also accepts 'true' (3D). Currently the lists are as follows:
// 2D: Mozilla, Webkit, Opera, Official
// 3D: Webkit, Official **(Only Safari Supports 3D perspective)**

// Available Transforms ------------------------------------------------------
// - Scale (2d and 3d)
// - Rotate (2d and 3d)
// - Translate (2d and 3d)
// - Skew (2d only)

// Transform Parameters ------------------------------------------------------
// - Transform Origin (2d and 3d)
// - Perspective (3d)
// - Perspective Origin (3d)
// - Transform Style (3d)
// - Backface Visibility (3d)

// Mixins --------------------------------------------------------------------
// transform-origin
//  - shortcuts:  transform-origin2d, transform-origin3d
//  - helpers:    apply-origin
// transform
//  - shortcuts:  transform2d, transform3d
//  - helpers:    simple-transform, create-transform
// perspective
//  - helpers:    perspective-origin
// transform-style
// backface-visibility
// scale
//  - shortcuts:  scaleX, scaleY, scaleZ, scale3d
// rotate
//  - shortcuts:  rotateX, rotateY, rotate3d
// translate
//  - shortcuts:  translateX, translateY, translateZ, translate3d
// skew
//  - shortcuts:  skewX, skewY

// Defaults ------------------------------------------------------------------
// @doc on

// The default x-origin for transforms
$default-origin-x    : 50%                   !default;
// The default y-origin for transforms
$default-origin-y    : 50%                   !default;
// The default z-origin for transforms
$default-origin-z    : 50%                   !default;


// The default x-multiplier for scaling
$default-scale-x     : 1.25                  !default;
// The default y-multiplier for scaling
$default-scale-y     : $default-scale-x      !default;
// The default z-multiplier for scaling
$default-scale-z     : $default-scale-x      !default;


// The default angle for rotations
$default-rotate      : 45deg                 !default;


// The default x-vector for the axis of 3d rotations
$default-vector-x    : 1                     !default;
// The default y-vector for the axis of 3d rotations
$default-vector-y    : 1                     !default;
// The default z-vector for the axis of 3d rotations
$default-vector-z    : 1                     !default;


// The default x-length for translations
$default-translate-x : 1em                   !default;
// The default y-length for translations
$default-translate-y : $default-translate-x  !default;
// The default z-length for translations
$default-translate-z : $default-translate-x  !default;


// The default x-angle for skewing
$default-skew-x      : 5deg                  !default;
// The default y-angle for skewing
$default-skew-y      : 5deg                  !default;


// **Transform-origin**
// Transform-origin sent as a complete string
//
//     @include apply-origin( origin [, 3D-only ] )
//
// where 'origin' is a space separated list containing 1-3 (x/y/z) coordinates
// in percentages, absolute (px, cm, in, em etc..) or relative
// (left, top, right, bottom, center) units
//
// @param only3d Set this to true to only apply this
// mixin where browsers have 3D support.
@mixin apply-origin($origin, $only3d) {
  $only3d: $only3d or -compass-list-size(-compass-list($origin)) > 2;
  @if $only3d {
    @include experimental(transform-origin, $origin,
      not -moz, -webkit, not -o, not -ms, not -khtml, official
    );
  } @else {
    @include experimental(transform-origin, $origin,
      -moz, -webkit, -o, -ms, not -khtml, official
    );
  }
}

// Transform-origin sent as individual arguments:
//
//     @include transform-origin( [ origin-x, origin-y, origin-z, 3D-only ] )
//
// where the 3 'origin-' arguments represent x/y/z coordinates.
//
// **NOTE:** setting z coordinates triggers 3D support list, leave false for 2D support
@mixin transform-origin(
  $origin-x: $default-origin-x,
  $origin-y: $default-origin-y,
  $origin-z: false,
  $only3d:   if($origin-z, true, false)
) {
  $origin: unquote('');
  @if $origin-x or $origin-y or $origin-z {
    @if $origin-x { $origin: $origin-x; } @else { $origin: 50%; }
    @if $origin-y { $origin: $origin $origin-y; } @else { @if $origin-z { $origin: $origin 50%; }}
    @if $origin-z { $origin: $origin $origin-z; }
    @include apply-origin($origin, $only3d);
  }
}


// Transform sent as a complete string:
//
//     @include transform( transforms [, 3D-only ] )
//
// where 'transforms' is a space separated list of all the transforms to be applied
@mixin transform(
  $transform,
  $only3d: false
) {
  @if $only3d {
    @include experimental(transform, $transform,
      not -moz, -webkit, not -o, not -ms, not -khtml, official
    );
  } @else {
    @include experimental(transform, $transform,
      -moz, -webkit, -o, -ms, not -khtml, official
    );
  }
}

// Shortcut to target all browsers with 2D transform support
@mixin transform2d($trans) {
  @include transform($trans, false);
}

// Shortcut to target only browsers with 3D transform support
@mixin transform3d($trans) {
  @include transform($trans, true);
}

// @doc off
// 3D Parameters -------------------------------------------------------------
// @doc on

// Set the perspective of 3D transforms on the children of an element:
//
//      @include perspective( perspective )
//
// where 'perspective' is a uniless number representing the depth of the z-axis
// the higher the perspective, the more exagerated the foreshortening.
// values from 500 to 1000 are more-or-less "normal" - a good starting-point.
@mixin perspective($p) {
  @include experimental(perspective, $p,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Set the origin position for the perspective
//
//      @include perspective-origin(origin-x [origin-y])
//
// where the two arguments represent x/y coordinates
@mixin perspective-origin($origin: 50%) {
  @include experimental(perspective-origin, $origin,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Determine whether a 3D objects children also live in the given 3D space
//
//      @include transform-style( [ style ] )
//
// where `style` can be either `flat` or `preserve-3d`
// browsers default to `flat`, mixin defaults to `preserve-3d`
@mixin transform-style($style: preserve-3d) {
  @include experimental(transform-style, $style,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Determine the visibility of an element when it's back is turned
//
//     @include backface-visibility( [ visibility ] )
//
// where `visibility` can be either `visible` or `hidden`
// browsers default to visible, mixin defaults to hidden
@mixin backface-visibility($visibility: hidden) {
  @include experimental(backface-visibility, $visibility,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// @doc off
// Transform Partials --------------------------------------------------------
// These work well on their own, but they don't add to each other, they override.
// Use along with transform parameter mixins to adjust origin, perspective and style
// ---------------------------------------------------------------------------


// Scale ---------------------------------------------------------------------
// @doc on

// Scale an object along the x and y axis:
//
//      @include scale( [ scale-x, scale-y, perspective, 3D-only ] )
//
// where the 'scale-' arguments are unitless multipliers of the x and y dimensions
// and perspective, which works the same as the stand-alone perspective property/mixin
// but applies to the individual element (multiplied with any parent perspective)
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scale(
  $scale-x:     $default-scale-x,
  $scale-y:     $scale-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: scale($scale-x, $scale-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the x axis
// @include scaleX( [ scale-x, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleX(
  $scale:       $default-scale-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: scaleX($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the y axis
// @include scaleY( [ scale-y, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleY(
  $scale:       $default-scale-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: scaleY($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the z axis
// @include scaleZ( [ scale-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleZ(
  $scale: $default-scale-z,
  $perspective: false
) {
  $trans: scaleZ($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Scale and object along all three axis
// @include scale3d( [ scale-x, scale-y, scale-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scale3d(
  $scale-x:     $default-scale-x,
  $scale-y:     $default-scale-y,
  $scale-z:     $default-scale-z,
  $perspective: false
) {
  $trans: scale3d($scale-x, $scale-y, $scale-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Rotate --------------------------------------------------------------------
// @doc on

// Rotate an object around the z axis  (2D)
// @include rotate( [ rotation, perspective, 3D-only ] )
// where 'rotation' is an angle set in degrees (deg) or radian (rad) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotate(
  $rotate:      $default-rotate,
  $perspective: false,
  $only3d:      false
) {
  $trans: rotate($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// A longcut for 'rotate' in case you forget that 'z' is implied
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateZ(
  $rotate:      $default-rotate,
  $perspective: false,
  $only3d:      false
) {
  @include rotate($rotate, $perspective, $only3d);
}

// Rotate an object around the x axis (3D)
// @include rotateX( [ rotation, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateX(
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotateX($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Rotate an object around the y axis (3D)
// @include rotate( [ rotation, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateY(
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotateY($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Rotate an object around an arbitrary axis (3D)
// @include rotate( [ vector-x, vector-y, vector-z, rotation, perspective ] )
// where the 'vector-' arguments accept unitless numbers
// these numbers are not important on their own, but in relation to one another
// creating an axis from your transform-origin, along the axis of Xx = Yy = Zz
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotate3d(
  $vector-x: $default-vector-x,
  $vector-y: $default-vector-y,
  $vector-z: $default-vector-z,
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotate3d($vector-x, $vector-y, $vector-z, $rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Translate -----------------------------------------------------------------
// @doc on

// Move an object along the x or y axis (2D)
// @include translate( [ translate-x, translate-y, perspective, 3D-only ] )
// where the 'translate-' arguments accept any distance in percentages or absolute (px, cm, in, em etc..) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translate(
  $translate-x: $default-translate-x,
  $translate-y: $default-translate-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: translate($translate-x, $translate-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the x axis (2D)
// @include translate( [ translate-x, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateX(
  $trans-x:     $default-translate-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: translateX($trans-x);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the y axis (2D)
// @include translate( [ translate-y, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateY(
  $trans-y:     $default-translate-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: translateY($trans-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the z axis (3D)
// @include translate( [ translate-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateZ(
  $trans-z:     $default-translate-z,
  $perspective: false
) {
  $trans: translateZ($trans-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Move an object along the x, y and z axis (3D)
// @include translate( [ translate-x, translate-y, translate-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translate3d(
  $translate-x: $default-translate-x,
  $translate-y: $default-translate-y,
  $translate-z: $default-translate-z,
  $perspective: false
) {
  $trans: translate3d($translate-x, $translate-y, $translate-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Skew ----------------------------------------------------------------------
// @doc on

// Skew an element:
//
//     @include skew( [ skew-x, skew-y, 3D-only ] )
//
// where the 'skew-' arguments accept css angles in degrees (deg) or radian (rad) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skew(
  $skew-x: $default-skew-x,
  $skew-y: $default-skew-y,
  $only3d: false
) {
  $trans: skew($skew-x, $skew-y);
  @include transform($trans, $only3d);
}

// Skew an element along the x axiz
//
//     @include skew( [ skew-x, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skewX(
  $skew-x: $default-skew-x,
  $only3d: false
) {
  $trans: skewX($skew-x);
  @include transform($trans, $only3d);
}

// Skew an element along the y axis
//
//     @include skew( [ skew-y, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skewY(
  $skew-y: $default-skew-y,
  $only3d: false
) {
  $trans: skewY($skew-y);
  @include transform($trans, $only3d);
}


// Full transform mixins
// For settings any combination of transforms as arguments
// These are complex and not highly recommended for daily use
// They are mainly here for backwards-compatability purposes
//
// * they include origin adjustments
// * scale takes a multiplier (unitless), rotate and skew take degrees (deg)
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin create-transform(
  $perspective: false,
  $scale-x:     false,
  $scale-y:     false,
  $scale-z:     false,
  $rotate-x:    false,
  $rotate-y:    false,
  $rotate-z:    false,
  $rotate3d:    false,
  $trans-x:     false,
  $trans-y:     false,
  $trans-z:     false,
  $skew-x:      false,
  $skew-y:      false,
  $origin-x:    false,
  $origin-y:    false,
  $origin-z:    false,
  $only3d:      false
) {
  $trans: unquote("");

  // perspective
  @if $perspective { $trans: perspective($perspective) ; }

  // scale
  @if $scale-x and $scale-y {
    @if $scale-z { $trans: $trans scale3d($scale-x, $scale-y, $scale-z); }
    @else { $trans: $trans scale($scale-x, $scale-y); }
  } @else {
    @if $scale-x { $trans: $trans scaleX($scale-x); }
    @if $scale-y { $trans: $trans scaleY($scale-y); }
    @if $scale-z { $trans: $trans scaleZ($scale-z); }
  }

  // rotate
  @if $rotate-x { $trans: $trans rotateX($rotate-x); }
  @if $rotate-y { $trans: $trans rotateY($rotate-y); }
  @if $rotate-z { $trans: $trans rotateZ($rotate-z); }
  @if $rotate3d { $trans: $trans rotate3d($rotate3d); }

  // translate
  @if $trans-x and $trans-y {
    @if $trans-z { $trans: $trans translate3d($trans-x, $trans-y, $trans-z); }
    @else { $trans: $trans translate($trans-x, $trans-y); }
  } @else {
    @if $trans-x { $trans: $trans translateX($trans-x); }
    @if $trans-y { $trans: $trans translateY($trans-y); }
    @if $trans-z { $trans: $trans translateZ($trans-z); }
  }

  // skew
  @if $skew-x and $skew-y { $trans: $trans skew($skew-x, $skew-y); }
  @else {
    @if $skew-x { $trans: $trans skewX($skew-x); }
    @if $skew-y { $trans: $trans skewY($skew-y); }
  }

  // apply it!
  @include transform($trans, $only3d);
  @include transform-origin($origin-x, $origin-y, $origin-z, $only3d);
}


// A simplified set of options
// backwards-compatible with the previous version of the 'transform' mixin
@mixin simple-transform(
  $scale:    false,
  $rotate:   false,
  $trans-x:  false,
  $trans-y:  false,
  $skew-x:   false,
  $skew-y:   false,
  $origin-x: false,
  $origin-y: false
) {
  @include create-transform(
    false,
    $scale, $scale, false,
    false, false, $rotate, false,
    $trans-x, $trans-y, false,
    $skew-x, $skew-y,
    $origin-x, $origin-y, false,
    false
  );
}
:@options{ :@children[io:Sass::Tree::ImportNode
;0;@;[ :
@linei:@imported_filename"sharedo:Sass::Tree::CommentNode
;@;[ :
@type:silent:@value["/* @doc off
 * Note ----------------------------------------------------------------------
 * Safari is the only browser that currently supports 3D transforms.
 * Because of that it can be important to control whether a given 2D transform
 * uses the full range of experimental browser prefixes, or only the 3D list.
 * To make that easy, all 2D transforms include an browser-targeting toggle ($only3d)
 * to switch between the two support lists. The toggle defaults to 'false' (2D),
 * and also accepts 'true' (3D). Currently the lists are as follows:
 * 2D: Mozilla, Webkit, Opera, Official
 * 3D: Webkit, Official **(Only Safari Supports 3D perspective)** */;
io;
;@;[ ;;;["¯/* Available Transforms ------------------------------------------------------
 * - Scale (2d and 3d)
 * - Rotate (2d and 3d)
 * - Translate (2d and 3d)
 * - Skew (2d only) */;
io;
;@;[ ;;;["Þ/* Transform Parameters ------------------------------------------------------
 * - Transform Origin (2d and 3d)
 * - Perspective (3d)
 * - Perspective Origin (3d)
 * - Transform Style (3d)
 * - Backface Visibility (3d) */;
io;
;@;[ ;;;["p/* Mixins --------------------------------------------------------------------
 * transform-origin
 *  - shortcuts:  transform-origin2d, transform-origin3d
 *  - helpers:    apply-origin
 * transform
 *  - shortcuts:  transform2d, transform3d
 *  - helpers:    simple-transform, create-transform
 * perspective
 *  - helpers:    perspective-origin
 * transform-style
 * backface-visibility
 * scale
 *  - shortcuts:  scaleX, scaleY, scaleZ, scale3d
 * rotate
 *  - shortcuts:  rotateX, rotateY, rotate3d
 * translate
 *  - shortcuts:  translateX, translateY, translateZ, translate3d
 * skew
 *  - shortcuts:  skewX, skewY */;
i o;
;@;[ ;;;["a/* Defaults ------------------------------------------------------------------
 * @doc on */;
i4o;
;@;[ ;;;["./* The default x-origin for transforms */;
i7o:Sass::Tree::VariableNode:
@name"default-origin-x;@:@guarded"!default;[ :
@expro:Sass::Script::Number;@:@denominator_units[ :@original"50%:@numerator_units["%;i7;
i8;
i8o;
;@;[ ;;;["./* The default y-origin for transforms */;
i9o;;"default-origin-y;@;"!default;[ ;o;;@;[ ;"50%;["%;i7;
i:;
i:o;
;@;[ ;;;["./* The default z-origin for transforms */;
i;o;;"default-origin-z;@;"!default;[ ;o;;@;[ ;"50%;["%;i7;
i<;
i<o;
;@;[ ;;;["//* The default x-multiplier for scaling */;
i?o;;"default-scale-x;@;"!default;[ ;o;;@;[ ;"	1.25;[ ;f	1.25;
i@;
i@o;
;@;[ ;;;["//* The default y-multiplier for scaling */;
iAo;;"default-scale-y;@;"!default;[ ;o:Sass::Script::Variable	;"default-scale-x;@:@underscored_name"default_scale_x;
iB;
iBo;
;@;[ ;;;["//* The default z-multiplier for scaling */;
iCo;;"default-scale-z;@;"!default;[ ;o;	;"default-scale-x;@;"default_scale_x;
iD;
iDo;
;@;[ ;;;["*/* The default angle for rotations */;
iGo;;"default-rotate;@;"!default;[ ;o;;@;[ ;"
45deg;["deg;i2;
iH;
iHo;
;@;[ ;;;["</* The default x-vector for the axis of 3d rotations */;
iKo;;"default-vector-x;@;"!default;[ ;o;;@;@P;"1;[ ;i;
iL;
iLo;
;@;[ ;;;["</* The default y-vector for the axis of 3d rotations */;
iMo;;"default-vector-y;@;"!default;[ ;o;;@;@P;"1;[ ;i;
iN;
iNo;
;@;[ ;;;["</* The default z-vector for the axis of 3d rotations */;
iOo;;"default-vector-z;@;"!default;[ ;o;;@;@P;"1;[ ;i;
iP;
iPo;
;@;[ ;;;["0/* The default x-length for translations */;
iSo;;"default-translate-x;@;"!default;[ ;o;;@;[ ;"1em;["em;i;
iT;
iTo;
;@;[ ;;;["0/* The default y-length for translations */;
iUo;;"default-translate-y;@;"!default;[ ;o;	;"default-translate-x;@;"default_translate_x;
iV;
iVo;
;@;[ ;;;["0/* The default z-length for translations */;
iWo;;"default-translate-z;@;"!default;[ ;o;	;"default-translate-x;@;"default_translate_x;
iX;
iXo;
;@;[ ;;;["*/* The default x-angle for skewing */;
i[o;;"default-skew-x;@;"!default;[ ;o;;@;[ ;"	5deg;["deg;i
;
i\;
i\o;
;@;[ ;;;["*/* The default y-angle for skewing */;
i]o;;"default-skew-y;@;"!default;[ ;o;;@;[ ;"	5deg;["deg;i
;
i^;
i^o;
;@;[ ;;;["/* **Transform-origin**
 * Transform-origin sent as a complete string
 *
 *     @include apply-origin( origin [, 3D-only ] )
 *
 * where 'origin' is a space separated list containing 1-3 (x/y/z) coordinates
 * in percentages, absolute (px, cm, in, em etc..) or relative
 * (left, top, right, bottom, center) units
 *
 * @param only3d Set this to true to only apply this
 * mixin where browsers have 3D support. */;
iao:Sass::Tree::MixinDefNode:
@args[[o;;"origin;@;"origin0[o;;"only3d;@;"only3d0;"apply-origin;@;[o;;"only3d;@;0;[ ;o:Sass::Script::Operation
:@operand1o;	;"only3d;@;"only3d;
im;@:@operator:or:@operand2o;
;o:Sass::Script::Funcall
;[o;!
;[o;	;"origin;@;"origin;
im;"-compass-list;@:@keywords{ ;
im;"-compass-list-size;@;"{ ;
im;@;:gt; o;;@;@P;"2;[ ;i;
im;
im;
im;
imu:Sass::Tree::IfNode [o:Sass::Script::Variable	:
@name"only3d:@options{ :@underscored_name"only3d:
@lineinu:Sass::Tree::IfNodeÚ[00[o:Sass::Tree::MixinNode:
@args[o:Sass::Script::String	:@options{ :
@type:identifier:@value"transform-origin:
@lineiso:Sass::Script::Variable	:
@name"origin;@
:@underscored_name"origin;iso;	;@
;	;
;"	-moz;ito;	;@
;	;
;"-webkit;ito;	;@
;	;
;"-o;ito;	;@
;	;
;"-ms;ito:!Sass::Script::UnaryOperation	:@operando;	;@
;	;
;"-khtml;it;@
:@operator:not;ito;	;@
;	;
;"official;it;"experimental;@
:@keywords{ :@children[ ;iu[o:Sass::Tree::MixinNode:
@args[o:Sass::Script::String	;@:
@type:identifier:@value"transform-origin;	ioo; 	;"origin;@;"origin;	ioo:!Sass::Script::UnaryOperation	:@operando;	;@;;;"	-moz;	ip;@:@operator:not;	ipo;	;@;;;"-webkit;	ipo;	;o;	;@;;;"-o;	ip;@;;;	ipo;	;o;	;@;;;"-ms;	ip;@;;;	ipo;	;o;	;@;;;"-khtml;	ip;@;;;	ipo;	;@;;;"official;	ip;"experimental;@:@keywords{ :@children[ ;	iq:@has_childrenT;
ilo;
;@;[ ;;;["#/* Transform-origin sent as individual arguments:
 *
 *     @include transform-origin( [ origin-x, origin-y, origin-z, 3D-only ] )
 *
 * where the 3 'origin-' arguments represent x/y/z coordinates.
 *
 * **NOTE:** setting z coordinates triggers 3D support list, leave false for 2D support */;
iyo;;[	[o;;"origin-x;@;"origin_xo;	;"default-origin-x;@;"default_origin_x;
i|[o;;"origin-y;@;"origin_yo;	;"default-origin-y;@;"default_origin_y;
i}[o;;"origin-z;@;"origin_zo:Sass::Script::Bool;@;F;
i~[o;;"only3d;@;"only3do;!
;[o;	;"origin-z;@;"origin_z;
io;&;@;T;
io;&;@;F;
i;"if;@;"{ ;
i;"transform-origin;@;[o;;"origin;@;0;[ ;o;!
;[o:Sass::Script::String	;@;:string;" ;
i;"unquote;@;"{ ;
i;
iu;$[o:Sass::Script::Operation
:@operand1o; 
;o:Sass::Script::Variable	:
@name"origin-x:@options{ :@underscored_name"origin_x:
@linei;	@
:@operator:or:@operand2o;	;"origin-y;	@
;
"origin_y;i;i;	@
;;;o;	;"origin-z;	@
;
"origin_z;i;i0[	u:Sass::Tree::IfNode¾[o:Sass::Script::Variable	:
@name"origin-x:@options{ :@underscored_name"origin_x:
@lineiu:Sass::Tree::IfNodeÐ[00[o:Sass::Tree::VariableNode:
@name"origin:@options{ :@guarded0:@children[ :
@expro:Sass::Script::Number;@	:@denominator_units[ :@original"50%:@numerator_units["%:@valuei7:
@linei;i[o:Sass::Tree::VariableNode;"origin;@:@guarded0:@children[ :
@expro; 	;"origin-x;@;"origin_x;	i;	iu;Þ[o:Sass::Script::Variable	:
@name"origin-y:@options{ :@underscored_name"origin_y:
@lineiu:Sass::Tree::IfNode[00[u:Sass::Tree::IfNoder[o:Sass::Script::Variable	:
@name"origin-z:@options{ :@underscored_name"origin_z:
@linei0[o:Sass::Tree::VariableNode;"origin;@:@guarded0:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o; 	;"origin;@;"origin;	io:Sass::Script::Number;@:@denominator_units[ :@original"50%:@numerator_units["%;i7;	i;	i;	i[o:Sass::Tree::VariableNode;"origin;@:@guarded0:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o; 	;"origin;@;"origin;	io; 	;"origin-y;@;"origin_y;	i;	i;	iu;5[o:Sass::Script::Variable	:
@name"origin-z:@options{ :@underscored_name"origin_z:
@linei0[o:Sass::Tree::VariableNode;"origin;@:@guarded0:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o; 	;"origin;@;"origin;	io; 	;"origin-z;@;"origin_z;	i;	i;	io:Sass::Tree::MixinNode:
@args[o;	;"origin;	@
;
"origin;io;	;"only3d;	@
;
"only3d;i;"apply-origin;	@
:@keywords{ :@children[ ;i;%T;
io;
;@;[ ;;;["¹/* Transform sent as a complete string:
 *
 *     @include transform( transforms [, 3D-only ] )
 *
 * where 'transforms' is a space separated list of all the transforms to be applied */;
io;;[[o;;"transform;@;"transform0[o;;"only3d;@;"only3do;&;@;F;
i;"transform;@;[u;$6[o:Sass::Script::Variable	:
@name"only3d:@options{ :@underscored_name"only3d:
@lineiu:Sass::Tree::IfNodeã[00[o:Sass::Tree::MixinNode:
@args[o:Sass::Script::String	:@options{ :
@type:identifier:@value"transform:
@lineio:Sass::Script::Variable	:
@name"transform;@
:@underscored_name"transform;io;	;@
;	;
;"	-moz;io;	;@
;	;
;"-webkit;io;	;@
;	;
;"-o;io;	;@
;	;
;"-ms;io:!Sass::Script::UnaryOperation	:@operando;	;@
;	;
;"-khtml;i;@
:@operator:not;io;	;@
;	;
;"official;i;"experimental;@
:@keywords{ :@children[ ;i[o:Sass::Tree::MixinNode:
@args[o:Sass::Script::String	;@:
@type:identifier:@value"transform;	io; 	;"transform;@;"transform;	io:!Sass::Script::UnaryOperation	:@operando;	;@;;;"	-moz;	i;@:@operator:not;	io;	;@;;;"-webkit;	io;	;o;	;@;;;"-o;	i;@;;;	io;	;o;	;@;;;"-ms;	i;@;;;	io;	;o;	;@;;;"-khtml;	i;@;;;	io;	;@;;;"official;	i;"experimental;@:@keywords{ :@children[ ;	i;%T;
io;
;@;[ ;;;["D/* Shortcut to target all browsers with 2D transform support */;
io;;[[o;;"
trans;@;"
trans0;"transform2d;@;[o:Sass::Tree::MixinNode;[o;	;"
trans;@;"
trans;
i¡o;&;@;F;
i¡;"transform;@;"{ ;[ ;
i¡;%T;
i o;
;@;[ ;;;["E/* Shortcut to target only browsers with 3D transform support */;
i¤o;;[[o;;"
trans;@;"
trans0;"transform3d;@;[o;);[o;	;"
trans;@;"
trans;
i¦o;&;@;T;
i¦;"transform;@;"{ ;[ ;
i¦;%T;
i¥o;
;@;[ ;;;["m/* @doc off
 * 3D Parameters -------------------------------------------------------------
 * @doc on */;
i©o;
;@;[ ;;;["`/* Set the perspective of 3D transforms on the children of an element:
 *
 *      @include perspective( perspective )
 *
 * where 'perspective' is a uniless number representing the depth of the z-axis
 * the higher the perspective, the more exagerated the foreshortening.
 * values from 500 to 1000 are more-or-less "normal" - a good starting-point. */;
i­o;;[[o;;"p;@;"p0;"perspective;@;[o;);[o;'	;@;:identifier;"perspective;
iµo;	;"p;@;"p;
iµo:!Sass::Script::UnaryOperation	:@operando;'	;@;;*;"	-moz;
i¶;@;:not;
i¶o;'	;@;;*;"-webkit;
i¶o;+	;,o;'	;@;;*;"-o;
i¶;@;;-;
i¶o;+	;,o;'	;@;;*;"-ms;
i¶;@;;-;
i¶o;+	;,o;'	;@;;*;"-khtml;
i¶;@;;-;
i¶o;'	;@;;*;"official;
i¶;"experimental;@;"{ ;[ ;
i·;%T;
i´o;
;@;[ ;;;["¥/* Set the origin position for the perspective
 *
 *      @include perspective-origin(origin-x [origin-y])
 *
 * where the two arguments represent x/y coordinates */;
iºo;;[[o;;"origin;@;"origino;;@;[ ;"50%;["%;i7;
i¿;"perspective-origin;@;[o;);[o;'	;@;;*;"perspective-origin;
iÀo;	;"origin;@;"origin;
iÀo;+	;,o;'	;@;;*;"	-moz;
iÁ;@;;-;
iÁo;'	;@;;*;"-webkit;
iÁo;+	;,o;'	;@;;*;"-o;
iÁ;@;;-;
iÁo;+	;,o;'	;@;;*;"-ms;
iÁ;@;;-;
iÁo;+	;,o;'	;@;;*;"-khtml;
iÁ;@;;-;
iÁo;'	;@;;*;"official;
iÁ;"experimental;@;"{ ;[ ;
iÂ;%T;
i¿o;
;@;[ ;;;["÷/* Determine whether a 3D objects children also live in the given 3D space
 *
 *      @include transform-style( [ style ] )
 *
 * where `style` can be either `flat` or `preserve-3d`
 * browsers default to `flat`, mixin defaults to `preserve-3d` */;
iÅo;;[[o;;"
style;@;"
styleo;'	;@;;*;"preserve-3d;
iË;"transform-style;@;[o;);[o;'	;@;;*;"transform-style;
iÌo;	;"
style;@;"
style;
iÌo;+	;,o;'	;@;;*;"	-moz;
iÍ;@;;-;
iÍo;'	;@;;*;"-webkit;
iÍo;+	;,o;'	;@;;*;"-o;
iÍ;@;;-;
iÍo;+	;,o;'	;@;;*;"-ms;
iÍ;@;;-;
iÍo;+	;,o;'	;@;;*;"-khtml;
iÍ;@;;-;
iÍo;'	;@;;*;"official;
iÍ;"experimental;@;"{ ;[ ;
iÎ;%T;
iËo;
;@;[ ;;;["ô/* Determine the visibility of an element when it's back is turned
 *
 *     @include backface-visibility( [ visibility ] )
 *
 * where `visibility` can be either `visible` or `hidden`
 * browsers default to visible, mixin defaults to hidden */;
iÑo;;[[o;;"visibility;@;"visibilityo;'	;@;;*;"hidden;
i×;"backface-visibility;@;[o;);[o;'	;@;;*;"backface-visibility;
iØo;	;"visibility;@;"visibility;
iØo;+	;,o;'	;@;;*;"	-moz;
iÙ;@;;-;
iÙo;'	;@;;*;"-webkit;
iÙo;+	;,o;'	;@;;*;"-o;
iÙ;@;;-;
iÙo;+	;,o;'	;@;;*;"-ms;
iÙ;@;;-;
iÙo;+	;,o;'	;@;;*;"-khtml;
iÙ;@;;-;
iÙo;'	;@;;*;"official;
iÙ;"experimental;@;"{ ;[ ;
iÚ;%T;
i×o;
;@;[ ;;;["S/* @doc off
 * Transform Partials --------------------------------------------------------
 * These work well on their own, but they don't add to each other, they override.
 * Use along with transform parameter mixins to adjust origin, perspective and style
 * --------------------------------------------------------------------------- */;
iÝo;
;@;[ ;;;["a/* Scale ---------------------------------------------------------------------
 * @doc on */;
iäo;
;@;[ ;;;["¾/* Scale an object along the x and y axis:
 *
 *      @include scale( [ scale-x, scale-y, perspective, 3D-only ] )
 *
 * where the 'scale-' arguments are unitless multipliers of the x and y dimensions
 * and perspective, which works the same as the stand-alone perspective property/mixin
 * but applies to the individual element (multiplied with any parent perspective)
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
iço;;[	[o;;"scale-x;@;"scale_xo;	;"default-scale-x;@;"default_scale_x;
iñ[o;;"scale-y;@;"scale_yo;	;"scale-x;@;"scale_x;
iò[o;;"perspective;@;"perspectiveo;&;@;F;
ió[o;;"only3d;@;"only3do;&;@;F;
iô;"
scale;@;[o;;"
trans;@;0;[ ;o;!
;[o;	;"scale-x;@;"scale_x;
iöo;	;"scale-y;@;"scale_y;
iö;"
scale;@;"{ ;
iö;
iöu;$[o:Sass::Script::Variable	:
@name"perspective:@options{ :@underscored_name"perspective:
@linei÷0[o:Sass::Tree::VariableNode;"
trans;@:@guarded0:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o:Sass::Script::Funcall
:
@args[o; 	;"perspective;@;"perspective;	i÷;"perspective;@:@keywords{ ;	i÷o; 	;"
trans;@;"
trans;	i÷;	i÷;	i÷o;);[o;	;"
trans;@;"
trans;
iøo;	;"only3d;@;"only3d;
iø;"transform;@;"{ ;[ ;
iø;%T;
iõo;
;@;[ ;;;["¨/* Scale an object along the x axis
 * @include scaleX( [ scale-x, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
iûo;;[[o;;"
scale;@;"
scaleo;	;"default-scale-x;@;"default_scale_x;
i [o;;"perspective;@;"perspectiveo;&;@;F;
i[o;;"only3d;@;"only3do;&;@;F;
i;"scaleX;@;[o;;"
trans;@;0;[ ;o;!
;[o;	;"
scale;@;"
scale;
i;"scaleX;@;"{ ;
i;
iu;$[o:Sass::Script::Variable	:
@name"perspective:@options{ :@underscored_name"perspective:
@linei0[o:Sass::Tree::VariableNode;"
trans;@:@guarded0:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o:Sass::Script::Funcall
:
@args[o; 	;"perspective;@;"perspective;	i;"perspective;@:@keywords{ ;	io; 	;"
trans;@;"
trans;	i;	i;	io;);[o;	;"
trans;@;"
trans;
io;	;"only3d;@;"only3d;
i;"transform;@;"{ ;[ ;
i;%T;
io;
;@;[ ;;;["¨/* Scale an object along the y axis
 * @include scaleY( [ scale-y, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
i	o;;[[o;;"
scale;@;"
scaleo;	;"default-scale-y;@;"default_scale_y;
i[o;;"perspective;@;"perspectiveo;&;@;F;
i[o;;"only3d;@;"only3do;&;@;F;
i;"scaleY;@;[o;;"
trans;@;0;[ ;o;!
;[o;	;"
scale;@;"
scale;
i;"scaleY;@;"{ ;
i;
iu;$[o:Sass::Script::Variable	:
@name"perspective:@options{ :@underscored_name"perspective:
@linei0[o:Sass::Tree::VariableNode;"
trans;@:@guarded0:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o:Sass::Script::Funcall
:
@args[o; 	;"perspective;@;"perspective;	i;"perspective;@:@keywords{ ;	io; 	;"
trans;@;"
trans;	i;	i;	io;);[o;	;"
trans;@;"
trans;
io;	;"only3d;@;"only3d;
i;"transform;@;"{ ;[ ;
i;%T;
io;
;@;[ ;;;["/* Scale an object along the z axis
 * @include scaleZ( [ scale-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
io;;[[o;;"
scale;@;"
scaleo;	;"default-scale-z;@;"default_scale_z;
i[o;;"perspective;@;"perspectiveo;&;@;F;
i;"scaleZ;@;[o;;"
trans;@;0;[ ;o;!
;[o;	;"
scale;@;"
scale;
i;"scaleZ;@;"{ ;
i;
iu;$[o:Sass::Script::Variable	:
@name"perspective:@options{ :@underscored_name"perspective:
@linei 0[o:Sass::Tree::VariableNode;"
trans;@:@guarded0:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o:Sass::Script::Funcall
:
@args[o; 	;"perspective;@;"perspective;	i ;"perspective;@:@keywords{ ;	i o; 	;"
trans;@;"
trans;	i ;	i ;	i o;);[o;	;"
trans;@;"
trans;
i!;"transform3d;@;"{ ;[ ;
i!;%T;
io;
;@;[ ;;;["·/* Scale and object along all three axis
 * @include scale3d( [ scale-x, scale-y, scale-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
i$o;;[	[o;;"scale-x;@;"scale_xo;	;"default-scale-x;@;"default_scale_x;
i)[o;;"scale-y;@;"scale_yo;	;"default-scale-y;@;"default_scale_y;
i*[o;;"scale-z;@;"scale_zo;	;"default-scale-z;@;"default_scale_z;
i+[o;;"perspective;@;"perspectiveo;&;@;F;
i,;"scale3d;@;[o;;"
trans;@;0;[ ;o;!
;[o;	;"scale-x;@;"scale_x;
i.o;	;"scale-y;@;"scale_y;
i.o;	;"scale-z;@;"scale_z;
i.;"scale3d;@;"{ ;
i.;
i.u;$[o:Sass::Script::Variable	:
@name"perspective:@options{ :@underscored_name"perspective:
@linei/0[o:Sass::Tree::VariableNode;"
trans;@:@guarded0:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o:Sass::Script::Funcall
:
@args[o; 	;"perspective;@;"perspective;	i/;"perspective;@:@keywords{ ;	i/o; 	;"
trans;@;"
trans;	i/;	i/;	i/o;);[o;	;"
trans;@;"
trans;
i0;"transform3d;@;"{ ;[ ;
i0;%T;
i-o;
;@;[ ;;;["m/* @doc off
 * Rotate --------------------------------------------------------------------
 * @doc on */;
i3o;
;@;[ ;;;["ü/* Rotate an object around the z axis  (2D)
 * @include rotate( [ rotation, perspective, 3D-only ] )
 * where 'rotation' is an angle set in degrees (deg) or radian (rad) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
i7o;;[[o;;"rotate;@;"rotateo;	;"default-rotate;@;"default_rotate;
i=[o;;"perspective;@;"perspectiveo;&;@;F;
i>[o;;"only3d;@;"only3do;&;@;F;
i?;"rotate;@;[o;;"
trans;@;0;[ ;o;!
;[o;	;"rotate;@;"rotate;
iA;"rotate;@;"{ ;
iA;
iAu;$[o:Sass::Script::Variable	:
@name"perspective:@options{ :@underscored_name"perspective:
@lineiB0[o:Sass::Tree::VariableNode;"
trans;@:@guarded0:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o:Sass::Script::Funcall
:
@args[o; 	;"perspective;@;"perspective;	iB;"perspective;@:@keywords{ ;	iBo; 	;"
trans;@;"
trans;	iB;	iB;	iBo;);[o;	;"
trans;@;"
trans;
iCo;	;"only3d;@;"only3d;
iC;"transform;@;"{ ;[ ;
iC;%T;
i@o;
;@;[ ;;;["/* A longcut for 'rotate' in case you forget that 'z' is implied
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
iFo;;[[o;;"rotate;@;"rotateo;	;"default-rotate;@;"default_rotate;
iJ[o;;"perspective;@;"perspectiveo;&;@;F;
iK[o;;"only3d;@;"only3do;&;@;F;
iL;"rotateZ;@;[o;);[o;	;"rotate;@;"rotate;
iNo;	;"perspective;@;"perspective;
iNo;	;"only3d;@;"only3d;
iN;"rotate;@;"{ ;[ ;
iN;%T;
iMo;
;@;[ ;;;["¨/* Rotate an object around the x axis (3D)
 * @include rotateX( [ rotation, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
iQo;;[[o;;"rotate;@;"rotateo;	;"default-rotate;@;"default_rotate;
iV[o;;"perspective;@;"perspectiveo;&;@;F;
iW;"rotateX;@;[o;;"
trans;@;0;[ ;o;!
;[o;	;"rotate;@;"rotate;
iY;"rotateX;@;"{ ;
iY;
iYu;$[o:Sass::Script::Variable	:
@name"perspective:@options{ :@underscored_name"perspective:
@lineiZ0[o:Sass::Tree::VariableNode;"
trans;@:@guarded0:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o:Sass::Script::Funcall
:
@args[o; 	;"perspective;@;"perspective;	iZ;"perspective;@:@keywords{ ;	iZo; 	;"
trans;@;"
trans;	iZ;	iZ;	iZo;);[o;	;"
trans;@;"
trans;
i[;"transform3d;@;"{ ;[ ;
i[;%T;
iXo;
;@;[ ;;;["§/* Rotate an object around the y axis (3D)
 * @include rotate( [ rotation, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
i^o;;[[o;;"rotate;@;"rotateo;	;"default-rotate;@;"default_rotate;
ic[o;;"perspective;@;"perspectiveo;&;@;F;
id;"rotateY;@;[o;;"
trans;@;0;[ ;o;!
;[o;	;"rotate;@;"rotate;
if;"rotateY;@;"{ ;
if;
ifu;$[o:Sass::Script::Variable	:
@name"perspective:@options{ :@underscored_name"perspective:
@lineig0[o:Sass::Tree::VariableNode;"
trans;@:@guarded0:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o:Sass::Script::Funcall
:
@args[o; 	;"perspective;@;"perspective;	ig;"perspective;@:@keywords{ ;	igo; 	;"
trans;@;"
trans;	ig;	ig;	igo;);[o;	;"
trans;@;"
trans;
ih;"transform3d;@;"{ ;[ ;
ih;%T;
ieo;
;@;[ ;;;["¤/* Rotate an object around an arbitrary axis (3D)
 * @include rotate( [ vector-x, vector-y, vector-z, rotation, perspective ] )
 * where the 'vector-' arguments accept unitless numbers
 * these numbers are not important on their own, but in relation to one another
 * creating an axis from your transform-origin, along the axis of Xx = Yy = Zz
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
iko;;[
[o;;"vector-x;@;"vector_xo;	;"default-vector-x;@;"default_vector_x;
is[o;;"vector-y;@;"vector_yo;	;"default-vector-y;@;"default_vector_y;
it[o;;"vector-z;@;"vector_zo;	;"default-vector-z;@;"default_vector_z;
iu[o;;"rotate;@;"rotateo;	;"default-rotate;@;"default_rotate;
iv[o;;"perspective;@;"perspectiveo;&;@;F;
iw;"rotate3d;@;[o;;"
trans;@;0;[ ;o;!
;[	o;	;"vector-x;@;"vector_x;
iyo;	;"vector-y;@;"vector_y;
iyo;	;"vector-z;@;"vector_z;
iyo;	;"rotate;@;"rotate;
iy;"rotate3d;@;"{ ;
iy;
iyu;$[o:Sass::Script::Variable	:
@name"perspective:@options{ :@underscored_name"perspective:
@lineiz0[o:Sass::Tree::VariableNode;"
trans;@:@guarded0:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o:Sass::Script::Funcall
:
@args[o; 	;"perspective;@;"perspective;	iz;"perspective;@:@keywords{ ;	izo; 	;"
trans;@;"
trans;	iz;	iz;	izo;);[o;	;"
trans;@;"
trans;
i{;"transform3d;@;"{ ;[ ;
i{;%T;
ixo;
;@;[ ;;;["m/* @doc off
 * Translate -----------------------------------------------------------------
 * @doc on */;
i~o;
;@;[ ;;;["5/* Move an object along the x or y axis (2D)
 * @include translate( [ translate-x, translate-y, perspective, 3D-only ] )
 * where the 'translate-' arguments accept any distance in percentages or absolute (px, cm, in, em etc..) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
io;;[	[o;;"translate-x;@;"translate_xo;	;"default-translate-x;@;"default_translate_x;
i[o;;"translate-y;@;"translate_yo;	;"default-translate-y;@;"default_translate_y;
i[o;;"perspective;@;"perspectiveo;&;@;F;
i[o;;"only3d;@;"only3do;&;@;F;
i;"translate;@;[o;;"
trans;@;0;[ ;o;!
;[o;	;"translate-x;@;"translate_x;
io;	;"translate-y;@;"translate_y;
i;"translate;@;"{ ;
i;
iu;$[o:Sass::Script::Variable	:
@name"perspective:@options{ :@underscored_name"perspective:
@linei0[o:Sass::Tree::VariableNode;"
trans;@:@guarded0:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o:Sass::Script::Funcall
:
@args[o; 	;"perspective;@;"perspective;	i;"perspective;@:@keywords{ ;	io; 	;"
trans;@;"
trans;	i;	i;	io;);[o;	;"
trans;@;"
trans;
io;	;"only3d;@;"only3d;
i;"transform;@;"{ ;[ ;
i;%T;
io;
;@;[ ;;;["³/* Move an object along the x axis (2D)
 * @include translate( [ translate-x, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
io;;[[o;;"trans-x;@;"trans_xo;	;"default-translate-x;@;"default_translate_x;
i[o;;"perspective;@;"perspectiveo;&;@;F;
i[o;;"only3d;@;"only3do;&;@;F;
i;"translateX;@;[o;;"
trans;@;0;[ ;o;!
;[o;	;"trans-x;@;"trans_x;
i;"translateX;@;"{ ;
i;
iu;$[o:Sass::Script::Variable	:
@name"perspective:@options{ :@underscored_name"perspective:
@linei0[o:Sass::Tree::VariableNode;"
trans;@:@guarded0:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o:Sass::Script::Funcall
:
@args[o; 	;"perspective;@;"perspective;	i;"perspective;@:@keywords{ ;	io; 	;"
trans;@;"
trans;	i;	i;	io;);[o;	;"
trans;@;"
trans;
io;	;"only3d;@;"only3d;
i;"transform;@;"{ ;[ ;
i;%T;
io;
;@;[ ;;;["³/* Move an object along the y axis (2D)
 * @include translate( [ translate-y, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
i o;;[[o;;"trans-y;@;"trans_yo;	;"default-translate-y;@;"default_translate_y;
i¥[o;;"perspective;@;"perspectiveo;&;@;F;
i¦[o;;"only3d;@;"only3do;&;@;F;
i§;"translateY;@;[o;;"
trans;@;0;[ ;o;!
;[o;	;"trans-y;@;"trans_y;
i©;"translateY;@;"{ ;
i©;
i©u;$[o:Sass::Script::Variable	:
@name"perspective:@options{ :@underscored_name"perspective:
@lineiª0[o:Sass::Tree::VariableNode;"
trans;@:@guarded0:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o:Sass::Script::Funcall
:
@args[o; 	;"perspective;@;"perspective;	iª;"perspective;@:@keywords{ ;	iªo; 	;"
trans;@;"
trans;	iª;	iª;	iªo;);[o;	;"
trans;@;"
trans;
i«o;	;"only3d;@;"only3d;
i«;"transform;@;"{ ;[ ;
i«;%T;
i¨o;
;@;[ ;;;["ª/* Move an object along the z axis (3D)
 * @include translate( [ translate-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
i®o;;[[o;;"trans-z;@;"trans_zo;	;"default-translate-z;@;"default_translate_z;
i³[o;;"perspective;@;"perspectiveo;&;@;F;
i´;"translateZ;@;[o;;"
trans;@;0;[ ;o;!
;[o;	;"trans-z;@;"trans_z;
i¶;"translateZ;@;"{ ;
i¶;
i¶u;$[o:Sass::Script::Variable	:
@name"perspective:@options{ :@underscored_name"perspective:
@linei·0[o:Sass::Tree::VariableNode;"
trans;@:@guarded0:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o:Sass::Script::Funcall
:
@args[o; 	;"perspective;@;"perspective;	i·;"perspective;@:@keywords{ ;	i·o; 	;"
trans;@;"
trans;	i·;	i·;	i·o;);[o;	;"
trans;@;"
trans;
i¸;"transform3d;@;"{ ;[ ;
i¸;%T;
iµo;
;@;[ ;;;["Í/* Move an object along the x, y and z axis (3D)
 * @include translate( [ translate-x, translate-y, translate-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
i»o;;[	[o;;"translate-x;@;"translate_xo;	;"default-translate-x;@;"default_translate_x;
iÀ[o;;"translate-y;@;"translate_yo;	;"default-translate-y;@;"default_translate_y;
iÁ[o;;"translate-z;@;"translate_zo;	;"default-translate-z;@;"default_translate_z;
iÂ[o;;"perspective;@;"perspectiveo;&;@;F;
iÃ;"translate3d;@;[o;;"
trans;@;0;[ ;o;!
;[o;	;"translate-x;@;"translate_x;
iÅo;	;"translate-y;@;"translate_y;
iÅo;	;"translate-z;@;"translate_z;
iÅ;"translate3d;@;"{ ;
iÅ;
iÅu;$[o:Sass::Script::Variable	:
@name"perspective:@options{ :@underscored_name"perspective:
@lineiÆ0[o:Sass::Tree::VariableNode;"
trans;@:@guarded0:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o:Sass::Script::Funcall
:
@args[o; 	;"perspective;@;"perspective;	iÆ;"perspective;@:@keywords{ ;	iÆo; 	;"
trans;@;"
trans;	iÆ;	iÆ;	iÆo;);[o;	;"
trans;@;"
trans;
iÇ;"transform3d;@;"{ ;[ ;
iÇ;%T;
iÄo;
;@;[ ;;;["m/* @doc off
 * Skew ----------------------------------------------------------------------
 * @doc on */;
iÊo;
;@;[ ;;;["ò/* Skew an element:
 *
 *     @include skew( [ skew-x, skew-y, 3D-only ] )
 *
 * where the 'skew-' arguments accept css angles in degrees (deg) or radian (rad) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
iÎo;;[[o;;"skew-x;@;"skew_xo;	;"default-skew-x;@;"default_skew_x;
iÖ[o;;"skew-y;@;"skew_yo;	;"default-skew-y;@;"default_skew_y;
i×[o;;"only3d;@;"only3do;&;@;F;
iØ;"	skew;@;[o;;"
trans;@;0;[ ;o;!
;[o;	;"skew-x;@;"skew_x;
iÚo;	;"skew-y;@;"skew_y;
iÚ;"	skew;@;"{ ;
iÚ;
iÚo;);[o;	;"
trans;@;"
trans;
iÛo;	;"only3d;@;"only3d;
iÛ;"transform;@;"{ ;[ ;
iÛ;%T;
iÙo;
;@;[ ;;;["/* Skew an element along the x axiz
 *
 *     @include skew( [ skew-x, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
iÞo;;[[o;;"skew-x;@;"skew_xo;	;"default-skew-x;@;"default_skew_x;
iä[o;;"only3d;@;"only3do;&;@;F;
iå;"
skewX;@;[o;;"
trans;@;0;[ ;o;!
;[o;	;"skew-x;@;"skew_x;
iç;"
skewX;@;"{ ;
iç;
iço;);[o;	;"
trans;@;"
trans;
ièo;	;"only3d;@;"only3d;
iè;"transform;@;"{ ;[ ;
iè;%T;
iæo;
;@;[ ;;;["/* Skew an element along the y axis
 *
 *     @include skew( [ skew-y, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
iëo;;[[o;;"skew-y;@;"skew_yo;	;"default-skew-y;@;"default_skew_y;
iñ[o;;"only3d;@;"only3do;&;@;F;
iò;"
skewY;@;[o;;"
trans;@;0;[ ;o;!
;[o;	;"skew-y;@;"skew_y;
iô;"
skewY;@;"{ ;
iô;
iôo;);[o;	;"
trans;@;"
trans;
iõo;	;"only3d;@;"only3d;
iõ;"transform;@;"{ ;[ ;
iõ;%T;
ióo;
;@;[ ;;;["/* Full transform mixins
 * For settings any combination of transforms as arguments
 * These are complex and not highly recommended for daily use
 * They are mainly here for backwards-compatability purposes
 *
 * * they include origin adjustments
 * * scale takes a multiplier (unitless), rotate and skew take degrees (deg)
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
iùo;;[[o;;"perspective;@;"perspectiveo;&;@;F;
i[o;;"scale-x;@;"scale_xo;&;@;F;
i[o;;"scale-y;@;"scale_yo;&;@;F;
i[o;;"scale-z;@;"scale_zo;&;@;F;
i[o;;"rotate-x;@;"rotate_xo;&;@;F;
i[o;;"rotate-y;@;"rotate_yo;&;@;F;
i[o;;"rotate-z;@;"rotate_zo;&;@;F;
i	[o;;"rotate3d;@;"rotate3do;&;@;F;
i
[o;;"trans-x;@;"trans_xo;&;@;F;
i[o;;"trans-y;@;"trans_yo;&;@;F;
i[o;;"trans-z;@;"trans_zo;&;@;F;
i[o;;"skew-x;@;"skew_xo;&;@;F;
i[o;;"skew-y;@;"skew_yo;&;@;F;
i[o;;"origin-x;@;"origin_xo;&;@;F;
i[o;;"origin-y;@;"origin_yo;&;@;F;
i[o;;"origin-z;@;"origin_zo;&;@;F;
i[o;;"only3d;@;"only3do;&;@;F;
i;"create-transform;@;[o;;"
trans;@;0;[ ;o;!
;[o;'	;@;;(;" ;
i;"unquote;@;"{ ;
i;
io;
;@;[ ;;;["/* perspective */;
iu;$.[o:Sass::Script::Variable	:
@name"perspective:@options{ :@underscored_name"perspective:
@linei0[o:Sass::Tree::VariableNode;"
trans;@:@guarded0:@children[ :
@expro:Sass::Script::Funcall
:
@args[o; 	;"perspective;@;"perspective;	i;"perspective;@:@keywords{ ;	i;	io;
;@;[ ;;;["/* scale */;
iu;$Ê[o:Sass::Script::Operation
:@operand1o:Sass::Script::Variable	:
@name"scale-x:@options{ :@underscored_name"scale_x:
@linei;	@	:@operator:and:@operand2o;	;"scale-y;	@	;
"scale_y;i;iu:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodev[o:Sass::Script::Variable	:
@name"scale-x:@options{ :@underscored_name"scale_x:
@linei0[o:Sass::Tree::VariableNode;"
trans;@:@guarded0:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o; 	;"
trans;@;"
trans;	io:Sass::Script::Funcall
:
@args[o; 	;"scale-x;@;"scale_x;	i;"scaleX;@:@keywords{ ;	i;	i;	iu; v[o:Sass::Script::Variable	:
@name"scale-y:@options{ :@underscored_name"scale_y:
@linei 0[o:Sass::Tree::VariableNode;"
trans;@:@guarded0:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o; 	;"
trans;@;"
trans;	i o:Sass::Script::Funcall
:
@args[o; 	;"scale-y;@;"scale_y;	i ;"scaleY;@:@keywords{ ;	i ;	i ;	i u; v[o:Sass::Script::Variable	:
@name"scale-z:@options{ :@underscored_name"scale_z:
@linei!0[o:Sass::Tree::VariableNode;"
trans;@:@guarded0:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o; 	;"
trans;@;"
trans;	i!o:Sass::Script::Funcall
:
@args[o; 	;"scale-z;@;"scale_z;	i!;"scaleZ;@:@keywords{ ;	i!;	i!;	i![u;L[o:Sass::Script::Variable	:
@name"scale-z:@options{ :@underscored_name"scale_z:
@lineiu:Sass::Tree::IfNodev[00[o:Sass::Tree::VariableNode:
@name"
trans:@options{ :@guarded0:@children[ :
@expro:Sass::Script::List	;@	:@separator:
space:@value[o:Sass::Script::Variable	;"
trans;@	:@underscored_name"
trans:
@lineio:Sass::Script::Funcall
:
@args[o;	;"scale-x;@	;"scale_x;io;	;"scale-y;@	;"scale_y;i;"
scale;@	:@keywords{ ;i;i;i[o:Sass::Tree::VariableNode;"
trans;@:@guarded0:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o; 	;"
trans;@;"
trans;	io:Sass::Script::Funcall
:
@args[o; 	;"scale-x;@;"scale_x;	io; 	;"scale-y;@;"scale_y;	io; 	;"scale-z;@;"scale_z;	i;"scale3d;@:@keywords{ ;	i;	i;	io;
;@;[ ;;;["/* rotate */;
i$u;${[o:Sass::Script::Variable	:
@name"rotate-x:@options{ :@underscored_name"rotate_x:
@linei%0[o:Sass::Tree::VariableNode;"
trans;@:@guarded0:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o; 	;"
trans;@;"
trans;	i%o:Sass::Script::Funcall
:
@args[o; 	;"rotate-x;@;"rotate_x;	i%;"rotateX;@:@keywords{ ;	i%;	i%;	i%u;${[o:Sass::Script::Variable	:
@name"rotate-y:@options{ :@underscored_name"rotate_y:
@linei&0[o:Sass::Tree::VariableNode;"
trans;@:@guarded0:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o; 	;"
trans;@;"
trans;	i&o:Sass::Script::Funcall
:
@args[o; 	;"rotate-y;@;"rotate_y;	i&;"rotateY;@:@keywords{ ;	i&;	i&;	i&u;${[o:Sass::Script::Variable	:
@name"rotate-z:@options{ :@underscored_name"rotate_z:
@linei'0[o:Sass::Tree::VariableNode;"
trans;@:@guarded0:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o; 	;"
trans;@;"
trans;	i'o:Sass::Script::Funcall
:
@args[o; 	;"rotate-z;@;"rotate_z;	i';"rotateZ;@:@keywords{ ;	i';	i';	i'u;$|[o:Sass::Script::Variable	:
@name"rotate3d:@options{ :@underscored_name"rotate3d:
@linei(0[o:Sass::Tree::VariableNode;"
trans;@:@guarded0:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o; 	;"
trans;@;"
trans;	i(o:Sass::Script::Funcall
:
@args[o; 	;"rotate3d;@;"rotate3d;	i(;"rotate3d;@:@keywords{ ;	i(;	i(;	i(o;
;@;[ ;;;["/* translate */;
i*u;$Þ[o:Sass::Script::Operation
:@operand1o:Sass::Script::Variable	:
@name"trans-x:@options{ :@underscored_name"trans_x:
@linei+;	@	:@operator:and:@operand2o;	;"trans-y;	@	;
"trans_y;i+;i+u:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodez[o:Sass::Script::Variable	:
@name"trans-x:@options{ :@underscored_name"trans_x:
@linei/0[o:Sass::Tree::VariableNode;"
trans;@:@guarded0:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o; 	;"
trans;@;"
trans;	i/o:Sass::Script::Funcall
:
@args[o; 	;"trans-x;@;"trans_x;	i/;"translateX;@:@keywords{ ;	i/;	i/;	i/u; z[o:Sass::Script::Variable	:
@name"trans-y:@options{ :@underscored_name"trans_y:
@linei00[o:Sass::Tree::VariableNode;"
trans;@:@guarded0:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o; 	;"
trans;@;"
trans;	i0o:Sass::Script::Funcall
:
@args[o; 	;"trans-y;@;"trans_y;	i0;"translateY;@:@keywords{ ;	i0;	i0;	i0u; z[o:Sass::Script::Variable	:
@name"trans-z:@options{ :@underscored_name"trans_z:
@linei10[o:Sass::Tree::VariableNode;"
trans;@:@guarded0:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o; 	;"
trans;@;"
trans;	i1o:Sass::Script::Funcall
:
@args[o; 	;"trans-z;@;"trans_z;	i1;"translateZ;@:@keywords{ ;	i1;	i1;	i1[u;T[o:Sass::Script::Variable	:
@name"trans-z:@options{ :@underscored_name"trans_z:
@linei,u:Sass::Tree::IfNodez[00[o:Sass::Tree::VariableNode:
@name"
trans:@options{ :@guarded0:@children[ :
@expro:Sass::Script::List	;@	:@separator:
space:@value[o:Sass::Script::Variable	;"
trans;@	:@underscored_name"
trans:
@linei-o:Sass::Script::Funcall
:
@args[o;	;"trans-x;@	;"trans_x;i-o;	;"trans-y;@	;"trans_y;i-;"translate;@	:@keywords{ ;i-;i-;i-[o:Sass::Tree::VariableNode;"
trans;@:@guarded0:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o; 	;"
trans;@;"
trans;	i,o:Sass::Script::Funcall
:
@args[o; 	;"trans-x;@;"trans_x;	i,o; 	;"trans-y;@;"trans_y;	i,o; 	;"trans-z;@;"trans_z;	i,;"translate3d;@:@keywords{ ;	i,;	i,;	i,o;
;@;[ ;;;["/* skew */;
i4u;$[o:Sass::Script::Operation
:@operand1o:Sass::Script::Variable	:
@name"skew-x:@options{ :@underscored_name"skew_x:
@linei5;	@	:@operator:and:@operand2o;	;"skew-y;	@	;
"skew_y;i5;i5u:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodeq[o:Sass::Script::Variable	:
@name"skew-x:@options{ :@underscored_name"skew_x:
@linei70[o:Sass::Tree::VariableNode;"
trans;@:@guarded0:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o; 	;"
trans;@;"
trans;	i7o:Sass::Script::Funcall
:
@args[o; 	;"skew-x;@;"skew_x;	i7;"
skewX;@:@keywords{ ;	i7;	i7;	i7u; q[o:Sass::Script::Variable	:
@name"skew-y:@options{ :@underscored_name"skew_y:
@linei80[o:Sass::Tree::VariableNode;"
trans;@:@guarded0:@children[ :
@expro:Sass::Script::List	;@:@separator:
space:@value[o; 	;"
trans;@;"
trans;	i8o:Sass::Script::Funcall
:
@args[o; 	;"skew-y;@;"skew_y;	i8;"
skewY;@:@keywords{ ;	i8;	i8;	i8[o:Sass::Tree::VariableNode;"
trans;	@	:@guarded0:@children[ :
@expro:Sass::Script::List	;	@	:@separator:
space:@value[o;	;"
trans;	@	;
"
trans;i5o:Sass::Script::Funcall
:
@args[o;	;"skew-x;	@	;
"skew_x;i5o;	;"skew-y;	@	;
"skew_y;i5;"	skew;	@	:@keywords{ ;i5;i5;i5o;
;@;[ ;;;["/* apply it! */;
i;o;);[o;	;"
trans;@;"
trans;
i<o;	;"only3d;@;"only3d;
i<;"transform;@;"{ ;[ ;
i<o;);[	o;	;"origin-x;@;"origin_x;
i=o;	;"origin-y;@;"origin_y;
i=o;	;"origin-z;@;"origin_z;
i=o;	;"only3d;@;"only3d;
i=;"transform-origin;@;"{ ;[ ;
i=;%T;
io;
;@;[ ;;;["q/* A simplified set of options
 * backwards-compatible with the previous version of the 'transform' mixin */;
iAo;;[[o;;"
scale;@;"
scaleo;&;@;F;
iD[o;;"rotate;@;"rotateo;&;@;F;
iE[o;;"trans-x;@;"trans_xo;&;@;F;
iF[o;;"trans-y;@;"trans_yo;&;@;F;
iG[o;;"skew-x;@;"skew_xo;&;@;F;
iH[o;;"skew-y;@;"skew_yo;&;@;F;
iI[o;;"origin-x;@;"origin_xo;&;@;F;
iJ[o;;"origin-y;@;"origin_yo;&;@;F;
iK;"simple-transform;@;[o;);[o;&;@;F;
iNo;	;"
scale;@;"
scale;
iOo;	;"
scale;@;"
scale;
iOo;&;@;F;
iOo;&;@;F;
iPo;&;@;F;
iPo;	;"rotate;@;"rotate;
iPo;&;@;F;
iPo;	;"trans-x;@;"trans_x;
iQo;	;"trans-y;@;"trans_y;
iQo;&;@;F;
iQo;	;"skew-x;@;"skew_x;
iRo;	;"skew-y;@;"skew_y;
iRo;	;"origin-x;@;"origin_x;
iSo;	;"origin-y;@;"origin_y;
iSo;&;@;F;
iSo;&;@;F;
iT;"create-transform;@;"{ ;[ ;
iU;%T;
iL;%T;
i